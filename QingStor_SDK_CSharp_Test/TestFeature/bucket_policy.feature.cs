// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace QingStor_SDK_CSharp_Test.TestFeature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("the bucket policy feature")]
    [NUnit.Framework.CategoryAttribute("bucket_policy")]
    public partial class TheBucketPolicyFeatureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "bucket_policy.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "the bucket policy feature", null, ProgrammingLanguage.CSharp, new string[] {
                        "bucket_policy"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("set the bucket policy")]
        public virtual void SetTheBucketPolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("set the bucket policy", ((string[])(null)));
#line 5
  this.ScenarioSetup(scenarioInfo);
#line hidden
#line 7
    testRunner.When("put bucket policy:", @"{
  ""statement"": [
    {
      ""id"": ""allow certain site to get objects"",
      ""user"": [
        ""*""
      ],
      ""action"": [
        ""get_object""
      ],
      ""effect"": ""allow"",
      ""resource"": [],
      ""condition"": {
        ""string_like"": {
          ""Referer"": [
            ""*.example1.com"",
            ""*.example2.com""
          ]
        },
        ""ip_address"": {
          ""source_ip"": [
            ""172.16.0.0/24"",
            ""172.16.1.1/32""
          ]
        }
      }
    }
  ]
}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
    testRunner.Then("put bucket policy status code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("get policy of the bucket")]
        public virtual void GetPolicyOfTheBucket()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("get policy of the bucket", ((string[])(null)));
#line 42
  this.ScenarioSetup(scenarioInfo);
#line 43
    testRunner.When("get bucket policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
    testRunner.Then("get bucket policy status code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
    testRunner.And("get bucket policy should have Referer \"*.example1.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("delete policy of the bucket")]
        public virtual void DeletePolicyOfTheBucket()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("delete policy of the bucket", ((string[])(null)));
#line 48
  this.ScenarioSetup(scenarioInfo);
#line 49
    testRunner.When("delete bucket policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
    testRunner.Then("delete bucket policy status code is 204", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
